#!/bin/bash
#
# Upload binary artifacts when a new release is made.
#

set -e

# Ensure that the GITHUB_TOKEN secret is included
if [[ -z "$GITHUB_TOKEN" ]]; then
  echo "Set the GITHUB_TOKEN env variable."
  exit 1
fi

# Ensure that there is a pattern specified.
if [[ -z "$1" ]]; then
  echo "Missing file (pattern) to upload."
  exit 1
fi

# Only upload to non-draft releases
IS_DRAFT=$(jq --raw-output '.release.draft' $GITHUB_EVENT_PATH)
if [ "$IS_DRAFT" = true ]; then
    echo "**************************************************"
    echo "  This is a draft-release, so we will do nothing"
    echo "**************************************************"
    exit 0
fi


#
# In the past we invoked a build-script to generate artifacts.
#
# Now we prefer to assume they are built alread.  However if
# there is a (legacy) build-script present AND the artifacts
# we expect to find are missing then we will invoke it.
#
if [ -e .github/build ]; then

    # Have we found any artifacts?
    found=
    for file in $*; do
        if [ -e "$file" ]; then
            found=1
        fi
    done

    #
    # OK if we have no artifacts already present.
    #
    # Run the build-script.
    #
    if [ -z "${found}" ]; then

        echo "************************************************************"
        echo " artifacts are missing, but a legacy build-script was found."
        echo " launching build-script .."
        echo "************************************************************"

        chmod 755 .github/build
        ./.github/build

        echo "************************************************************"
        echo " artifacts are missing, but a legacy build-script was found."
        echo " build-script completed"
        echo "************************************************************"
    else
        echo "*****************************************************************"
        echo " Artifacts are already present, skipping the legacy build-script."
        echo "*****************************************************************"    fi
fi

# Prepare the headers
AUTH_HEADER="Authorization: token ${GITHUB_TOKEN}"

# Build the Upload URL from the various pieces
RELEASE_ID=$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)

# For each matching file
for file in $*; do

    echo "Processing file ${file}"

    if [ ! -e "$file" ]; then
        echo "*****************************"
        echo " file not present - skipping."
        echo "*****************************"
        continue
    fi

    if [ -s "$file" ]; then
        echo "**************************"
        echo " file is empty - skipping."
        echo "**************************"
        continue
    fi


    FILENAME=$(basename ${file})

    UPLOAD_URL="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${RELEASE_ID}/assets?name=${FILENAME}"
    echo "Upload URL is ${UPLOAD_URL}"

    # Upload the file
    curl \
        -sSL \
        -XPOST \
        -H "${AUTH_HEADER}" \
        --upload-file "${file}" \
        --header "Content-Type:application/octet-stream" \
        "${UPLOAD_URL}"

    # If the curl-command returned a non-zero response we must abort
    if [ "$?" -ne 0 ]; then
        echo "**********************************"
        echo " curl command did not return zero."
        echo " Aborting"
        echo "**********************************"
        exit 1
    fi

done
